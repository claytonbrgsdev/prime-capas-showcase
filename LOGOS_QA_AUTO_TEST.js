/**
 * ü§ñ LOGOS QA - TESTE AUTOMATIZADO
 * Execute este script no console do navegador ap√≥s abrir http://127.0.0.1:8000
 */

console.log('ü§ñ LOGOS QA - TESTE AUTOMATIZADO INICIADO');
console.log('üìç URL: http://127.0.0.1:8000');

// PASSO 1: Habilitar logs
console.log('\nüìù PASSO 1: Habilitando logs LOGOS_DEBUG');
localStorage.LOGOS_DEBUG = '1';
console.log('‚úÖ localStorage.LOGOS_DEBUG = "1" ativado');

// PASSO 2: Aguardar modelo carregar e executar mapeamento  
console.log('\n‚è≥ PASSO 2: Aguardando modelo carregar (8 segundos)...');

function executarTeste() {
  try {
    console.log('\nüìä EXECUTANDO LOGOS_QA.map()');
    const mapping = window.LOGOS_QA.map();
    console.log('‚úÖ Mapeamento capturado:', mapping);
    
    if (!mapping || mapping.length === 0) {
      throw new Error('‚ùå Nenhuma inst√¢ncia LOGOS encontrada! Certifique-se de que o modelo foi carregado.');
    }
    
    console.log(`‚úÖ Encontradas ${mapping.length} inst√¢ncias LOGOS`);
    
    // PASSO 3: Definir prefer√™ncias de teste
    console.log('\n‚öôÔ∏è PASSO 3: Definindo prefer√™ncias de teste');
    const prefsTest = {0: 1, 1: 2, 2: 0, 3: 3}; // 90¬∞, 180¬∞, 0¬∞, 270¬∞
    const setPrefResult = window.LOGOS_QA.setPrefsByIdx(prefsTest);
    console.log('‚úÖ Prefer√™ncias definidas:', prefsTest);
    console.log('‚úÖ setPrefsByIdx resultado:', setPrefResult);
    
    // PASSO 4: Reaplicar manualmente (simula upload PNG)
    console.log('\nüîÑ PASSO 4: Reaplicando prefer√™ncias (simula upload PNG)');
    const reapplyResult = window.LOGOS_QA.reapply();
    console.log('‚úÖ Reaplica√ß√£o executada:', reapplyResult);
    
    // PASSO 5: Verifica√ß√£o final
    console.log('\nüîç PASSO 5: Verifica√ß√£o rigorosa');
    const verification = window.LOGOS_QA.verify(1e-3);
    console.log('üìä Resultado da verifica√ß√£o:', verification);
    
    // AN√ÅLISE DOS RESULTADOS
    console.log('\nüéØ AN√ÅLISE DOS RESULTADOS:');
    
    if (verification.fail === 0) {
      console.log('üéâ TODOS OS CRIT√âRIOS DE ACEITE PASSARAM!');
      console.log(`‚úÖ Aprovado: ${verification.pass}/${verification.total} inst√¢ncias`);
      console.log('‚úÖ Rota√ß√µes aplicadas corretamente');
      console.log('‚úÖ Centros UV dentro da toler√¢ncia (‚â§ 0.001)');
      console.log('‚úÖ Sistema LOGOS funcionando 100%');
    } else {
      console.log('‚ö†Ô∏è ALGUNS TESTES FALHARAM:');
      console.log(`‚ùå Reprovado: ${verification.fail}/${verification.total} inst√¢ncias`);
      console.log('üîç Detalhes dos erros:');
      verification.details.filter(d => !d.ok).forEach(detail => {
        console.log(`   ‚Ä¢ Inst√¢ncia ${detail.idx}: ${detail.reason || 'Verificar q_now vs q_exp ou center_dx/dy'}`);
      });
      
      console.log('\nüí° POSS√çVEIS SOLU√á√ïES:');
      console.log('   1. Verificar se as texturas foram aplicadas');
      console.log('   2. Tentar com localStorage.LOGOS_REFIT_ODD="1"');
      console.log('   3. Fazer upload de PNG real e verificar novamente');
    }
    
    // VERIFICA√á√ÉO DOS CRIT√âRIOS DE ACEITE
    console.log('\nüìã VERIFICA√á√ÉO DOS CRIT√âRIOS DE ACEITE:');
    
    const criterios = [
      { nome: 'window.LOGOS_QA dispon√≠vel', ok: !!window.LOGOS_QA },
      { nome: 'window.LOGOS_QA.map existe', ok: typeof window.LOGOS_QA.map === 'function' },
      { nome: 'window.LOGOS_QA.setPrefsByIdx existe', ok: typeof window.LOGOS_QA.setPrefsByIdx === 'function' },
      { nome: 'window.LOGOS_QA.verify existe', ok: typeof window.LOGOS_QA.verify === 'function' },
      { nome: 'Mapeamento retorna dados', ok: mapping.length > 0 },
      { nome: 'Prefer√™ncias salvas', ok: setPrefResult === true },
      { nome: 'Reaplica√ß√£o funciona', ok: reapplyResult === true },
      { nome: 'Verifica√ß√£o retorna estrutura correta', ok: verification && 'pass' in verification && 'fail' in verification }
    ];
    
    criterios.forEach(c => {
      console.log(`${c.ok ? '‚úÖ' : '‚ùå'} ${c.nome}`);
    });
    
    const todosCriterios = criterios.every(c => c.ok);
    console.log(`\nüèÜ RESULTADO FINAL: ${todosCriterios ? 'APROVADO' : 'REPROVADO'}`);
    
    if (todosCriterios && verification.fail === 0) {
      console.log('üéØ METODOLOGIA LOGOS: 100% FUNCIONAL!');
    }
    
  } catch (error) {
    console.error('‚ùå ERRO DURANTE TESTE:', error);
    console.log('\nüí° TROUBLESHOOTING:');
    console.log('   1. Certifique-se de estar em http://127.0.0.1:8000');
    console.log('   2. Aguarde o modelo carregar completamente');
    console.log('   3. Verifique se existem inst√¢ncias LOGOS no modelo');
    console.log('   4. Tente recarregar a p√°gina e executar novamente');
  }
}

// Executar ap√≥s delay
setTimeout(executarTeste, 8000);

console.log('‚è≥ Aguardando 8 segundos para modelo carregar...');
console.log('üí° Enquanto isso, certifique-se de que:');
console.log('   ‚Ä¢ Est√° acessando http://127.0.0.1:8000');
console.log('   ‚Ä¢ O modelo est√° sendo carregado');
console.log('   ‚Ä¢ N√£o h√° erros no console');
